#!/bin/bash

# COLORS
RED="\e[31m"
GREEN="\033[1;32m"
YELLOW="\e[33m"
BLUE="\e[34m"
MAGENTA="\e[95m"
CYAN="\e[36m"
DEFAULT="\e[39m"
BOLD="\e[1m"
NORMAL="\e[0m"

# Help function
show_help() {
    echo -e "${BOLD}${GREEN}Usage:${NORMAL} $0 -d <domain>"
    echo -e "${BOLD}${CYAN}Options:${NORMAL}"
    echo -e "  -d <domain>   Specify the target domain"
    echo -e "  -h            Show this help message"
    echo -e "  -c            Contact & Donate (Buy Me a Coffee)"
    exit 0
}

# Contact function
show_contact() {
    echo -e "${BOLD}${GREEN}Author: Vulncrax${NORMAL}"
    echo -e "YouTube: https://www.youtube.com/@vulncrax"
    echo -e "Donate: https://buymeacoffee.com/vulncrax"
    exit 0
}

# Argument parsing
while getopts ":d:hc" opt; do
    case ${opt} in
        d ) domain=$OPTARG ;;
        h ) show_help ;;
        c ) show_contact ;;
        \?) echo "Invalid option: -$OPTARG" >&2; show_help ;;
    esac
done

# Check if domain is provided
if [ -z "$domain" ]; then
    echo -e "${RED}Error: Domain not provided! Use -d <domain>.${NORMAL}"
    show_help
fi

# Clear screen
clear

# Branding
printf "
     ______                _ ____     
    / ____/________ __  __(${BOLD}${RED}${BOLD}${GREEN}) __/_  __
   / /   / ___/ __ \` |/_ / / /_/ / / /${BOLD}${GREEN}   Author: Vulncrax
  / /___/ /  / /_/ />  </ / __/ /_/ /    https://www.youtube.com/@vulncrax 
  \____/_/   \__,_/_/|_/_/_/  \__, /  
                           /____/   
                  
${NORMAL}\n"

printf "${BOLD}${RED}✘ Target  https://$domain ${NORMAL}\n\n"
sleep 3  # Pause execution for 3 seconds

# Define directories
BASE_DIR="$HOME/craxify"
RESULTS_DIR="$BASE_DIR/results"
DOMAIN_DIR="$RESULTS_DIR/$domain"

# Create directories silently if they don't exist
[ -d "$BASE_DIR" ] || sudo mkdir "$BASE_DIR"
[ -d "$RESULTS_DIR" ] || sudo mkdir "$RESULTS_DIR"
[ -d "$DOMAIN_DIR" ] || sudo mkdir "$DOMAIN_DIR"

# Step 1: Subdomain Enumeration
printf "${BOLD}${GREEN}[] Finding subdomains${NORMAL}\n\n"
sudo subfinder -d "$domain" -silent | sudo tee "$DOMAIN_DIR/subdomains.txt"

# Step 2: Resolving active subdomains
printf "${BOLD}${GREEN}[] Filtering active subdomains...${NORMAL}\n\n"
sudo httpx -l "$DOMAIN_DIR/subdomains.txt" -mc 200,301,404,400 -silent -o "$DOMAIN_DIR/resolved.txt"

# Step 3: Resolving to IPs
printf "${BOLD}${GREEN}[] Resolving domains to IPs${NORMAL}\n\n"
cat "$DOMAIN_DIR/resolved.txt" | sudo dnsx -silent -o "$DOMAIN_DIR/ips.txt"

# Step 4: Identifying Web Technologies
printf "${BOLD}${GREEN}[] Identifying web technologies...${NORMAL}\n\n"
sudo whatweb -i "$DOMAIN_DIR/resolved.txt" --log-brief="$DOMAIN_DIR/whatweb.txt"

# Step 5: Collecting URLs
printf "${BOLD}${GREEN}[] Running waybackurls${NORMAL}\n\n"
cat "$DOMAIN_DIR/resolved.txt" | waybackurls | sudo tee "$DOMAIN_DIR/wayback.txt"

printf "${BOLD}${GREEN}[] Running Gau${NORMAL}\n\n"
cat "$DOMAIN_DIR/resolved.txt" | sudo gau --o "$DOMAIN_DIR/gau.txt"
printf "${BOLD}${GREEN}[] Running Katana${NORMAL}\n\n"
sudo katana --list "$DOMAIN_DIR/resolved.txt" -o "$DOMAIN_DIR/katana.txt"

printf "${BOLD}${GREEN}[*] Running hakrawler${NORMAL}\n\n"

sudo cat $DOMAIN_DIR/resolved.txt | hakrawler | sudo tee $DOMAIN_DIR/hakrawler.txt
printf "${BOLD}${GREEN}[*] Running Urlfinder${NORMAL}\n\n"

sudo cat $DOMAIN_DIR/resolved.txt | urlfinder | sudo tee $DOMAIN_DIR/urlfinder.txt
printf "${BOLD}${GREEN}[*] Filtering endponits${NORMAL}\n\n"

cat $DOMAIN_DIR/*.txt | sort -u | uro | urldedupe | urless | sudo tee $DOMAIN_DIR/endpoints.txt
printf "${BOLD}${GREEN}[*] Filtering results${NORMAL}\n\n"


sudo cat $DOMAIN_DIR/endpoints.txt| grep -E "\.txt|\.log|\.cache|\.secret|\.db|\.backup|\.yml|\.json|\.gz|\.rar|\.zip|\.config|\json" | sudo tee $DOMAIN_DIR/endpoints_result.txt

curl -G "https://web.archive.org/cdx/search/cdx" --data-urlencode "url=*.$domain/*" --data-urlencode "collapse=urlkey" --data-urlencode "output=text" --data-urlencode "fl=original" >> endpoints.txt

printf "${BOLD}${GREEN}[*] Filtering js files${NORMAL}\n\n"

sudo cat $DOMAIN_DIR/endpoints.txt | grep -E "\.js$" | sudo tee $DOMAIN_DIR/js.txt
printf "${BOLD}${GREEN}[*] Checking Cors misconfiguration${NORMAL}\n\n"

python3 $HOME/tools/Corsy/corsy.py -i "$DOMAIN_DIR/resolved.txt"
cat $DOMAIN_DIR/resolved.txt | nuclei -tags cors


# Completion Message
printf "${BOLD}${GREEN}[*] Scan completed! Results saved to  $HOME/craxify/results/$domain ${NORMAL}\n\n"
